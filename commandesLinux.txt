###################################
###   Commandes console LINUX   ###
###################################

Ouvrir la console
-----------------
Ctrl + Alt + F1 à F6 				Attention pour la saisie : le pavé numérique est inopérant
Ctrl + Alt + F7 					: Retour au mode graphique

Commandes utiles
-----------------------------------
pwd									: Afficher le répertoire courant
maCommande > nomDeMaCommance.txt 	: Enregistrer le résultat d'une commande dans un fichier texte
date 								: Affiche la date
ls 									: Lister les éléments du répertoire actuel
ls -a 								: idem mais avec les éléments cachés
ls --all							: idem mais le paramètre est en version longue
ls -l 								: affiche la liste détaillée
ls -lh 								: meilleure lisibilité de la taille des fichiers
ls -lt 								: trier par date de dernière modification
ls -ltr 							: renverse l'ordre d'affichage
ls -i 								: affiche la référence inode (contenu)
"2 x la tabulation" 				: pour l'autocomplétion
history 							: L'historique des commandes
Ctrl + R 							: Recherche d'une ancienne commande
clear 								: vide la console
exit 								: quitte la console
which maCommande 					: emplacement du programme relatif à la commande passée en paramètre
stat monFichier 					: donne des infos sur le fichier entré en paramètre
file monFichier 					: idem

Navigation
-----------
cd dossierDeDestination 			: naviguer dans les dossiers
cd .. 								: aller au dossier parent
cd / 								: aller dans la racine
"cd ~" ou "cd"						: aller dans mon dossier home
"touche Tab"(1X ou 2X) 				: pour l'autocomplétion
du -h 								: taille du dossier (et de ses sous-dossiers), lisible pour les humains 
du -a 								: taille des dossiers ET des fichiers
du -sh 								: taille totale lisible

Raccourcis clavier utiles
-------------------------
Ctrl + L 							: vide la console
Ctrl + D 							: quitte la console
Ctrl + A 							: Ramène le curseur au début de la commande
Ctrl + E 							: ramène le curseur à la fin de la ligne de commande
Ctrl + U 							: supprime tout ce qui se trouve à gauche du curseur
Ctrl + K 							: supprime tout ce qui se trouve à droite du curseur
Ctrl + W 							: supprime le premier mot situé à gauche du curseur
Ctrl + Y 							: « collera » le texte que vous venez de supprimer

Manipuler les fichiers
-----------------------
cat nomDuFichier						: afficher le contenu
cat -n nomDuFichier 					: en numérotant les lignes
less nomDuFichier 						: afficher le contenu du fichier page par page ("entrée" = + 1 ligne, "espace" = + 1 page, "q" = quitter)
h 										: aide lors de l'exécution de la commande "less"
head nomDuFichier 						: affiche le début du fichier
head -n 3 nomDuFichier 					: affiche les trois premières lignes du fichier
tail nomDuFichier 						: affiche la fin du fichier
tail -n 10 nomDuFichier 				: affiche les dix dernières lignes du fichier
tail -f 								: suit les modifications du fichier (affichage en live) --> TRES UTILE pour voir les connexions en temps réel sur des fichiers de log
"Ctrl + C" 								: Arrête la commande
grep monPattern monFichier 				: rechercher du contenu dans un fichier
touch nomDuFichier 						: créer un fichier
touch monFichier monAutreFichier 		: créer plusieurs fichiers en même temps
touch "mon fichier" 					: utilisation de guillemets pour créer un nom contenant un espace
mkdir monDossier 						: créer un dossier
cp monFichier maCopie 					: copier le fichier monFichier en créant maCopie
cp monFichier monDossier/ 				: spécifier dans quel dossier on le copie
cp monFichier monDossier/maCopie 		: spécifier le dossier et le nouveau nom
cp -R monDossier 						: copier un dossier et son contenu
cp *.jpg monDossier/					: copier tous les fichiers image dans monDossier
cp so* monDossier/ 						: copier tous les fichiers qui commencent par "so" dans monDossier
mv monFichier monDossier/ 				: déplace monFichier vers monDossier
mv monFichier monFichier2 				: renommer un fichier
mv monFichier monDossier/monFichier2 	: déplacer et renommer un fichier
rm monFichier 							: supprimer un fichier ou un dossier
rm -i monFichier 						: supprimer un fichier ou un dossier (avec demande de confirmation)
rm -v monFichier 						: supprimer en mode verbose
rm -r 									: supprime un dossier et tout ce qu'il contient
ATTENTION rm -rf /*						: tue un pc/serveur en effaçant tout depuis la racine (nécessite des droits root)
ln fichier1 fichier2 					: créer un lien physique entre deux fichiers (ils partagent le même inode/contenu)
ln -s fichier1 fichier2 				: crée un lien symbolique (raccourci), nb : les liens symboliques fonctionnent aussi vers des dossiers
maCommande > monFichier.txt 			: enregistrer le résultat d'une commande dans un fichier

Utilisateurs et droits
-----------------------
Par sécurité, Ubuntu est la seule distribution à ne pas autoriser de se loguer en root
sudo maCommande							: permet d'être en root temporairement pour l'exécution d'une commande nécessitant des droits d'administrateur
sudo su 								: passer en root indéfiniment
exit (ou "Ctrl + D") 					: quitte le mode root
adduser nouvelUtilisateur 				: ajouter un nouveau compte utilisateur
passwd monCompteUtilisateur 			: changer le mot de passe d'un utilisateur
deluser --remove-home nomUtilisateur 	: supprime un compte utilisateur et son dossier
NB : pour les autres distri adduser=useradd deluser=userdel
addgroup monGroup 									: créer un groupe
usermod 											: éditer un utilisateur au sein d'un groupe
usermod -g monGroupe monUtilisateur 				: changer un utilisateur de groupe
usermod -G groupe1,groupe2,groupe3 monUtilisateur 	: insérer un utilisateur dans plusieurs groupes
usermod -aG nouveauGroupe monUtilisateur 			: ajouter un nouveau groupe pour un utilisateur
delgroup monGroup 									: supprimer un groupe
NB : autres dist : groupadd, groupdel
chown nouveauProprio monFichier 					: changer le propriétaire d'un fichier
chgrp nouveauGroupe monFichier 						: changer le groupe propriétaire d'un fichier
chown nouveauProprio:nouveauGroupe monFichier 		: changer le propriétaire et le groupe d'un fichier
chown -R nouveauProprio:nouveauGroupe monDossier 	: transférer de manière récursive (cad + tout son contenu) un dossier vers un nouveau proprio et un nouveau groupe
chmod 777 monFichier 								: accorder tous les droits à tout le monde
chmod 600 monFichier 								: accorder tous les droits à l'utilisateur uniquement
chmod 000 monFichier 								: aucun droit pour personne (sauf root)
chmod 444 monFichier 								: uniquement droit de lecture pour tout le monde (utilisateur, groupe et autres)
chmod 222 monFichier 								: uniquement droit d'écriture pour tout le monde
chmod 111 monFichier 								: uniquement droit d'exécution
chmod 555 monFichier 								: droit de lecture et d'exécution
chmod -R 700 monDossier 							: Tous droits pour user sur le dossier et ses fichiers (récursivité), et aucun droit aux autres et au groupe

chmod g+w monFichier 								: ajouter droit d'écriture pour le groupe
chmod u-r monFichier 								: retirer le droit de lecture pour l'utilisateur
chmod o+x monFichier 								: ajouter droit d'exécution pour les autres
chmod go-rx monFichier 								: retirer les droits de lecture et d'exécution au groupe et aux autres 
chmod g+r,u+w monFichier 							: ajouter plus finement des droits en fonction du type de destinataire
chmod +x monFichier 								: ajouter le droit d'exécution à tout le monde
chmod u=rwx monFichier 								: affecter tous les droits au propriétaire

nano
----
nano monFichier 									: ouvrir un fichier avec nano
nano -m 											: autorise la souris
nano -i 											: indentation automatique (utile pour le codage)
nano -A 											: active le retour intelligent à la ligne (utile pour le codage)
.nanorc 											: fichier de configuration de nano
/etc/nanorc 										: emplacement du fichier de configuration générale (sert d'expl, uniquement commentaire # --> possible de décommenter)
.bashrc 											: fichier de configuration de la console

installation de programmes
---------------------------
/etc/apt/sources.list 								: fichier gérant les dépôts utilisés par l'ordinateur (éditable en mode root)
via GUI : paramètres système > 						: choisir le serveur le plus performant pour moi
	Logiciels et mise à jour > 
	Télécharger depuis : > 
	sélectionner le meilleur système

apt-get update 										: bonne installation en trois commandes
apt-cache search maRecherche (NB : optionnel, si on ne connaît pas bien le nom recherché)
apt-get install monPaquet 

apt-cache show monPaquet 							: description du paquet
apt-get install monPaquet1 monPaquet2 monPaquet3 	: installer plusieurs paquets d'un coup
apt-get remove monPaquet 							: désinstaller un paquet
apt-get autoremove monPaquet 						: désintalle un paquet ET ses dépendances
apt-get upgrade 									: mise à jour des paquets existants

RTFM
----
man maCommande 										: documentation relative à une commande
q : quitter
/ : recherche
apropos maPossibleCommande 							: recherche sur une éventuelle commande dans toutes les pages du manuel
maCommande -h 										: Lecture parfois plus facile que le man
whatis maCommande 									: man allégé

Rechercher des fichiers
------------------------
Recherche via une DB :
locate nomDuFichier 								: localiser un fichier par son nom ou une partie de son nom
sudo updatedb 										: mettre à jour la base de données contenant les fichiers et leur localisation

Recherche directe et fine (sur le nom exact): --> syntaxe = find "où" "quoi" "que faire avec"
find -name "monFichier" 							: recherche le nom précisé dans le répertoire courant
find nomDossier -name "monFichier" 					: recherche dans un autre répertoire que la répertoire courant
find -name "monFichier*" 							: recherche avec une variante sur le nom
find ~ -size +10M 									: rechercher dans mon home tous les fichiers excédant 10 MB
find -name ".txt" -atime 6 							: les fichiers textes pour lesquels le dernier accès date de moins 6 jours
find -name ".txt" +atime 6 							: les fichiers textes pour lesquels le dernier accès date de plus 6 jours
find -name "monNom" -type d 						: rechercher uniquement des dossiers
find -name "monNom" -type f 						: rechercher uniquement des fichiers
find -name "*.jpg" -delete 							: supprimer tous les fichier jpg
find -name ".jpg" -exec maCommande {} \; 			: appliquer une commande à tous les fichiers trouvés ({} remplace les noms des fichiers)


Divers
-------
alsamixer 											: paramétrage du son
/opt/lampp/lampp start 								: démarrer le package XAMPP (en root)
/opt/lampp/lampp stop								: arrêter le package XAMPP (en root)
/opt/lampp/htdocs 									: localisation des fichiers sur le serveur (y créer le répertoire du projet)
alias ls='ls -la' 									: permet de simplifier une commande
echo "ma Phrase" 									: permet d'afficher du texte 

Filtrer des données
-------------------
grep monTexte monFichier 		: rechercher du texte dans un fichier
grep "ma Phrase" monFichier 	: expression à chercher
grep -i monTexte monFichier 	: ne tient pas compte de la casse
grep -n monTexte monFichier 	: affiche le numéro de ligne
grep -v monTexte monFichier 	: recherche inversée (ignore le mot donné)
grep -r monTexte /monDossier 	: recherche récursive (regrep = commande équivalente)
Utilisation avec des expressions régulières
--------------------------------------------
.	Caractère quelconque
^	Début de ligne
$	Fin de ligne
[]	Un des caractères entre les crochets
?	L'élément précédent est optionnel (peut être présent 0 ou 1 fois)
*	L'élément précédent peut être présent 0, 1 ou plusieurs fois
+	L'élément précédent doit être présent 1 ou plusieurs fois
|	Ou
()	Groupement d'expressions

grep -E monRegex monFichier 	: fait comprendre à grep qu'on utilise une expression régulière (équivaut à egrep)

Trier les lignes d'un fichier
-----------------------------
sort monFichier 					: tri des lignes par ordre alphabétique
sort -o monFichierTrié monFichier 	: écrit un nouveau fichier avec le résultat
sort -r monFichier 					: trier en ordre inverse
sort -R monFichier 					: trier aléatoirement
sort -n monFichier 					: trier les nombres

Compter le nombre de lignes
---------------------------
wc monFichier 						: compte le nombre de lignes, le nombre de mots et le nombre d'octets
wc -l monFichier 					: compte le nombre de lignes
wc -w monFichier 					: compte le nombre de mots
wc -c monFichier 					: compte le nombre d'octets
wc -m monFichier 					: compte le nombre de caractères

Supprimer les doublons
----------------------
uniq monFichier 					: supprime les doublons (Attention : nécessite un triage préalable avec sort)
uniq monFichier monNouveauFichier	: stocker la liste sans doublon dans un nouveau fichier
uniq -c monFichier 					: compte le nombre d'occurrences
uniq -d monFichier 					: affiche les liste en double

Couper une partie de fichier
-----------------------------
cut -c 2-5 monFichier 	: reprend du deuxième au cinquième caractère de chaque ligne
cut -c -3 monFichier 	: reprend du premier au troisième caractère de chaque ligne 
cut -c 3- monFichier 	: reprend la ligne à partir du 3eme caractère
cut -d ; -f 1-n 		: coupe à l'aide d'un délimiteur (exempl pour un csv), ici le ";". Garde les champs/colonnes 1 à n
cut -d ; -f 1,n 		: coupe à l'aide d'un délimiteur (exempl pour un csv), ici le ";". Garde les champs/colonnes 1 et n

Flux de redirection
--------------------
maCommande > monNouveauFichier 				: redirige le résultat vers un fichier (écrase)
maCommande >> monFichier 					: redirige le résultat à la fin d'un fichier (n'écrase pas)
maCommande > monFichier 2> erreurs.log 		: rediriger les erreurs (le nom erreurs.log est donné par moi)
maCommande > monFichier 2>> erreurs.log 	: rediriger les erreurs (le nom erreurs.log est donné par moi), avec un append
maCommande > monFichier 2>&1 			 	: envoyer les erreurs et les sorties standard vers un fichier unique
maCommande >> monFichier 2>&1 			 	: envoyer les erreurs et les sorties standard vers un fichier unique, avec un append
maCommande < monFichier 					: utiliser le contenu d'un fichier comme paramètre
maCommande << STOP 							: saisie progressive de données au clavier (STOP définit la fin de la série de saisies)
maCommande << STOP > monFichier 2>&1		: les données saisies et leur traitement seront inscrites dans un fichier (ainsi que les erreurs)
maCommande1 monFichier | maCommande2 		: Chainer des commandes

Surveiller l'activité du système
--------------------------------
w 						: Etat des lieux, qui fait quoi ?
uptime 					: affiche la durée de fonctionnement de la machine (exemple : up 1:11)
tload 					: % de charge du processeur si > que le nombre de core du processeur, alors l'ordinateur est surchargé (charge sur 1, 5 et 15 min)
who 					: liste des connectés
ps 						: liste statique des processus
ps -ef 					: liste des processus lancés par tous les utilisateurs
ps -ejH 				: Affiche les processus en arbre
ps -u monNom 			: liste des processus lancés par l'utilisateur mentionné
top 					: liste dynamique des processus (q = quitter, h = afficher l'aide)
"Ctrl"+"C" 				: arrêt d'un programme console
kill PID 				: tuer un programme fonctionnant en arrière plan (récupérer le PID avec un ps ou un top)
kill PID PID PID 		: tuer plusieurs processus
kill -9 PID 			: arrêt immédiat du processus (en cas de non réponse du programme)
kill all nomProcessus 	: arrêter plusieurs processus (en les désignant par leur nom)
sudo halt 				: arrêt de l'ordi
sudo reboot 			: redémarrager de l'ordi

Exécuter des programmes en arrière-plan
---------------------------------------
maCommande & 		: Exécuter une tâche en arrière plan (affiche le numéro de tâche et son PID)
nohup maCommande 	: détacher le processus de la console (s'exécute donc même si l'on ferme la console) 
CRTL + Z 			: met en pause l'exécution d'un programme et le passe en arrière plan
bg 					: glisse un processus en pause vers l'arrière plan et le met en état running
jobs 				: affiche les processus tournant en arrière-plan
fg 					: reprendre un processus en avant-plan
fg %2 				: reprendre le processus n° 2 en avant-plan (numéro de processus, pas PID)

Exécuter un programme à une heure différée
------------------------------------------
date "+%H:%M:%S" 			: personnaliser l'affichage d'une date (ici : heure, minutes et secones)
date "+%H:%M:%S" 			: personnaliser l'affichage d'une date (seule la lettre qui suit le "%" est interprétée)
date "+Bienvenue en %Y" 	: "bienvenue en 2019"
sudo date MMDDhhmmYYYY 		: modifier la date
--- Planification d'une tâche ponctuelle -----
at HH:MM 									-- ou at HH:MM tomorrow ou at HH:MM 10/15/2019 (format de date US)
écrire la commande dans le prompt			--
CTRL + D 									--
----------------------------------------------
at now +5 minutes 							: pour exécuter la commande après un certain délais (ou "hours", "days", "weeks", "months", "years")
atq 										: liste des jobs en attente
atrm 13 									: supprimer le job n° 13 
maCommande1; maCommande2 					: simplement en chaîner des commandes indépendantes
maCommande1; sleep 10; maCommande2 			: fait une pause de 10 sec entre l'exécution des deux commandes
maCommande1; sleep 10m; maCommande2 		: fait une pause de 10 minutes entre l'exécution des deux commandes
maCommande1; sleep 10h; maCommande2 		: fait une pause de 10 heures entre l'exécution des deux commandes
maCommande1; sleep 10d; maCommande2 		: fait une pause de 10 jours entre l'exécution des deux commandes
maCommande1 && sleep 10 && maCommande2 		: l'enchaînement s'arrête en cas d'erreur
-----------------------------------------------------------------------------
crontab (liste des programmes qui doivent s'éxécuter sur une base régulière)
-----------------------------------------------------------------------------
NB : configuration --> ajouter la ligne suivante à la fin du .bashrc : export EDITOR=nano (rouvrir le terminal pour que la modif soit prise en compte)
crontab -l 	: affiche la crontab de l'utilisateur
crontab -e 	: éditer la crontab (l'éditeur de texte par défaut s'ouvre)

Communication sécurisée SSH
----------------------------
Installer le programme openssh-server (ouvert à chaque démarrage)
sudo /etc/init.d/ssh start 		: lancement du serveur ssh
sudo /etc/init.d/ssh stop 		: arrêt du serveur ssh
/etc/ssh/ssh_config 			: fichier de configuration ssh
sudo /etc/init.d/ssh reload 	: chargement de la nouvelle configuration lorsque le fichier de configuration a été modifié
ssh monLogin@monIP 				: connecter l'ordinateur au serveur 
www.whatismyip.com 				: identifier l'IP sur le net
ifconfig 						: identifier son ip sur le réseau local
logout 							: quitter la connexion
--------------------------------------------
Pour Windows : utiliser le programme putty
--------------------------------------------

Transferts de fichiers
-----------------------
wget adresseDuLien 											: téléchargement d'un fichier
Ctrl + C 													: suspendre un téléchargement
wget -c adresseDuLien 										: reprise d'un téléchargement suspendu
wget --background -c 										: télécharger un fichier en tâche de fond
scp monFichierLocal monLogin@monIP:monDossierDestination 	: transfert sécurisé d'un fichier locall vers un autre ordinateur du réseau
scp monLogin@monIP:monFichier . 							: copier un fichier situé sur le serveur sur mon répertoire courant local
scp -P 1234 monLogin@monIP:monFichier . 					: préciser le port si le serveur ne se trouve pas sur le port standard 22
ftp adresseDuServeurFtp 									: se connecter à un serveur FTP (on y navigue aussi en ligne de cmd)
ftp> get monFichier 										: récupérer un fichier sur un serveur FTP
ftp> put monFichier 										: déposer un fichier sur un serveur FTP
ftp> !maCommande 											: Exécuter sur mon local lorsqu'on est en connexion avec un serveur FTP
ftp> quit 													: quitter la connexion ftp  
sftp adresseDuServeurSFTP 									: connexion à un service ftp sécurisé
rsync -arv dossierASauvegarder dossierDestination 			: sauvegarde intelligence (synchronisée) d'un répertoire (compare les deux répertoires)
rsync -arv --delete dossierASauvegarder dossierDestination 	: sauvegarde intelligence (synchronisée) d'un répertoire, avec supression des excédents

Analyser le réseau avec un pare-feu
------------------------------------
host monIp ou monNomDeDomaine 	: infos sur IP, serveurs, noms de domaines d'un site
sudo nano /etc/hosts 			: fichier de correspondance entre ip et noms de domaines (alternative locale aux serveurs DNS)
whois 							: infos sur le nom de domaine
ifconfig 						: liste des interfaces réseaux (lo = boucle locale)
ifcongig monInterface down 		: désactiver une interface
ifconfig monInterface up 		: réactiver une interface
netstat 						: statistiques sur le réseau
netstat -i 						: statistiques sur les interfaces réseaux
netstat -uta 					: liste de toutes les connexions ouvertes (listen = en attente de connexion, de recevoir des données)
netstat -utan 					: avec les numéros de port (22 pour ssh, 80 pour le web -www-, 21 pour ftp)
netstat -lt 					: liste des connexions en état d'écoute (quels ports de serveurs sont-ils susceptibles d'être utilisés pour le moment)
netstat -s 						: statistiques réseau résumées

Pare-feu iptables (s'utilise en root)
-------------------------------------
iptables -L 				: afficher les règles en vigueur (chain input = trafic entrant, chain output = trafic sortant)
iptables -L --line-numbers 	: idem avec numérotation des lignes
iptables -F   				<-- Attention ! Réinitialise toutes les règles iptables !
iptables -A myChain 				: ajoute une règle en fin de liste pour lachainindiquée (INPUTouOUTPUT, par exemple).
iptables -D chain rulenum 			: supprime la règle n° rulenumpour lachainindiquée.
iptables -I chain rulenum 			: insère une règle au milieu de la liste à la position indiquée parrulenum. 
iptables -R chain rulenum 			: remplace la règle n° rulenumdans lachainindiquée.
iptables -F chain 					: vide toutes les règles de lachainindiquée. Cela revient à supprimer toutes les règles une par une pour cettechain.
iptables -P chain regle 			: modifie la règle par défaut pour lachain. 

iptables -A (chain) -p (protocole) --dport (port) -j (décision) : syntaxe générale
Quelques exemples (ici juste pour l'input):
iptables -A INPUT -p tcp --dport ssh -j ACCEPT
iptables -A INPUT -p tcp --dport www -j ACCEPT
iptables -A INPUT -p tcp --dport imap2 -j ACCEPT

iptables -A INPUT -p icmp -j ACCEPT 	: autoriser les ping (protocome icmp) sur tous les ports

Les règles suivantes permettent d'assouplir le pare-feu et de le rendre utilisable
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -P INPUT DROP : refuser toutes les autres connexions par défaut (sinon les règles précédentes ne servent à rien)

ATTENTION : les règles devront être inscrites dans un script pour être lancées au démarrage

Compiler un programme depuis ses sources (.deb, lorsque apt-get ne s'appliqua pas pour une installation)
---------------------------------------------------------------------------------------------------------
et si pas de .deb disponible : compiler soi-même (voir les instructions du site du logiciel) :
il faut alors décompresser le paquet télécharger et se rendre dans le répertoire créé pour lancer "./configure"
la configuration affiche éventuellement des erreurs à corriger (le plus souvent installer des dépendances manquantes)
puis lancer la commande "make" (la compilation est lancée)
puis : sudo make install (l'installation se fait)

VIM
---
vim 		: lancer le logiciel
vimtutor 	: tutoriel

vim
----
i 				: insérer du texte
0 				: début de ligne
$ 				: fin de ligne
h,j,k,l 		: déplacements
w 				: se déplacer de mot en mot
:w monFichier 	: enregistrer le fichier
:q 				: quitter
:q! 			: forcer la sortie
:wq 			: enregistrer puis quitter
x 				: effacer (mode interactif)
4x 				: effacer quatre lettres suivant le curseur
dd 				: effacer (couper) un ligne (mode interactif)
2dd 			: effacer (couper) deux lignes (mode interactif)
dw 				: supprimer un mot
d3w 			: supprimer les trois prochains mots
d0 				: supprimer vers le début de la ligne
d$ 				: supprimer vers la fin de la ligne
yy 				: copier une ligne en mémoire
yw 				: copier un mot en mémoire
y$ 				: copier jusqu'à la fin de la ligne en mémoire
p 				: coller la ligne/le mot/... en mémoire
8p 				: coller à huit reprises
rs 				: remplacer un caractère par s
Rsalut 			: mode remplacement, permet de remplacer par un mot entier
u 				: annuler un changement
4u 				: annuler les quatre derniers changements
ctrl + R 		: annuler une annulation
gg 				: 1ère ligne
G 				: dernière ligne
ctrl + G 		: affiche en bas de l'écran le numéro de la ligne et l'état du défilement
7G 				: aller à la 7ème ligne 
/monMot 		: rechercher un mot
n 				: match suivant
N 				: match précédent
?monMot 					: recherche à partir du début du fichier 
:s/ancienMot/nouveauMot 	: remplacer un mot dans une ligne
%s/ancienMot/nouveauMot/g 	: remplace toutes les occurences (g) dans l'ensemble du fichier
:r monFichierAInserer 		: insère le contenu d'un fichier
:sp 						: découpage horizontal de l'écran (Viewport)
:vsp 						: découpage vertical de l'écran
ctrl w (X2) 				: passer d'un viewport à l'autre
:!maCommande 				: lancer une commande externe
--------------
options VIM
--------------
copier vimrc dans son dossier personnel sous le nom .vimrc
éditer le fichier vimrc (utiliser les uncomment peut être facile et utile)
utile : coloration de la syntaxe
utile : background = dark pour une coloration syntaxique adaptée aux fonds noirs
utile : ajouter l'option set number
utile : ajouter l'option set showcmd
utile : set ignorecase (pour les recherches)
utile : set mouse=a (active le support de la souris)

###############
Scripts Shell
###############
pt-get install ksh 	: installer un nouveau shell (ici ksh)
chsh 				: changer le shell par défaut après l'installation (renseigner l'emplacement du programme, ici /bin/ksh)
Créer un fichier texte (par convention avec l'extension .sh)
contenu du fichier shell
------------------------
#!/bin/bash 	: permet de charger le bon shell (car les codes varient d'un shell à l'autre)
# ceci est un commentaire dans un shell

./monScript.sh 							: exécution d'un script shell (en s'assurant de bien avoir les droits d'exécution)
bash -x monScript.sh 					: lancer en mode déboguage
sudo cp ./monScript.sh /usr/local/bin 	: créer sa propre commande
sudo cp ./monScript.sh /usr/bin 		: Idem
sudo cp ./monScript.sh /bin 			: Idem

Variables
---------
maVar='monContenu' 			: déclarer une variable
echo 'hello world' 			: afficher dans la console
echo -e 'hello \nworld' 	: afficher dans la console avec un retour à la ligne
echo $maVar 				: afficher une variable
echo 'monTexte $maVar' 		: affichage littéral
echo "monTexte $maVar" 		: bash analyse le contenu à afficher
echo "monTexte $maVar" 		: contient une commande à exécuter lorsque maVar=`maCmd`
read monUserInput 			: créer une saisie (echo $monUserInput : afficher cette saisie) 
read var1 var2 var 3 		: créé plusieurs input simultanément (echo $var1 $var2 $var3 pour afficher)
read -p 'monMessage' maVar 	: saisie avec un message prompt

limiter la saisie à 5 caractères :
---- 
read -p 'Entrez votre login (5 caractères max) : ' -n 5 nom
echo -e "\nBonjour $nom !"
-t 	: ce paramètre prévoit un timer pour le read
-s 	: ce para masque le texte saisi (utile pour un password)

Effectuer des opérations mathématiques (bash n'est pas prévu pour ça)
let "a=2"
let "b=3"
let "c=a+b"
echo $c

divers (linux cmd)
------------------
env 	: affiche les var d'environnement (ces var -en majuscule- peuvent être convoquées comme n'importe quelle var, ex $EDITOR)

Paramètres des scripts shell
----------------------------
monScript.sh para1 para2 para3
$# : nombre de paramètres
$0 : nom du script
$1 : premier paramètre
$2 : deuxième paramètre
etc... jusqu'à $9

Tableaux
---------
monTableau=('maVal1','maVal2','maVal3') 	: instancier un tableau
${monTableau[2]} 							: utilisation des index (??????????????)
${monTableau[*]} 							: afficher tout le tableau

Conditions
-----------
if [ monTest ] 		: attention aux espaces dans les crochets
then
	maCommande
elif
	maCommande2
else
	maCommande3
fi

types de tests pour les conditions :
-------------------------------------
$chaine1 = $chaine2 	: égalité entre deux chaînes de caractères
$chaine1 != $chaine2 	: inégalité entre deux chaînes de caractères
-z $chaine 				: vérifie si une chaîne est vide
-n $chaine 				: vérifie si une chaîne est non vide

$num1 -eq $num2 	: Vérifie si deux nombres sont égaux
$num1 -ne $num2 	: vérifie si deux nombres ne sont pas égaux
$num1 -lt $num2 	: vérifie si num1 < num2
$num1 -le $num2 	: vérifie si num1 <= num2
$num1 -gt $num2 	: vérifie si num1 > num2
$num1 -ge $num2 	: vérifie si num1 >= num2

-e $nomfichier 				: Vérifie si le fichier existe.
-d $nomfichier 				: Vérifie si le fichier est un répertoire.
-f $nomfichier 				: Vérifie si le fichier est un fichier. 
-L $nomfichier 				: Vérifie si le fichier est un lien symbolique (raccourci).
-r $nomfichier 				: Vérifie si le fichier est lisible 
-w $nomfichier 				: Vérifie si le fichier est modifiable 
-x $nomfichier 				: Vérifie si le fichier est exécutable 
$fichier1 -nt $fichier2 	: Vérifie sifichier1est plus récent quefichier2
$fichier1 -ot $fichier2 	: Vérifie sifichier1est plus vieux quefichier2

|| ou && 	: pour effectuer plusieurs tests à la fois
! 			: pour inverser un test (négation)

 case : pour simplifier les if testés sur plusieurs conditions
 --------------------------------------------------------------
Example:
case $1 in
        "Bruno")
                echo "Salut Bruno !"
                ;;
        "Michel")
                echo "Bien le bonjour Michel"
                ;;
        "Jean")
                echo "Hé Jean, ça va ?"
                ;;
        *)
                echo "J'te connais pas, ouste !"
                ;;
esac

Attention : les | et & ne sont pas doublés au sein d'un case
exemple :
case $1 in
        "Chien" | "Chat" | "Souris")
                echo "C'est un mammifère"
                ;;
        "Moineau" | "Pigeon")
                echo "C'est un oiseau"
                ;;
        *)
                echo "Je ne sais pas ce que c'est"
                ;;
esac

Les boucles
-----------
while
-----
while [ monTest ]
do
	maCommande
done

for
---
for monElement in 'myVal1' 'myVal2' 'myVal3'
do
	maCommande
done

for plus classique
-------------------
for i in `seq 1 10`;
do
	maCommande
done

Fonctions (2 syntaxes possibles) nb: possibilité d'utiliser des para selon le système classique du shell
--------------------------------
maFonction ()

{
maCommande 
}
-----------------
function maFonction

{
maCommande 
}
-----------------
maFonction 	: appel de ma fonction

